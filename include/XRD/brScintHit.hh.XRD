/*
 * mqScintHit.hh
 *
 *  Created on: 22.04.2019
 *      Author: schmitz
 */

#ifndef MQSCINTHIT_HH_
#define MQSCINTHIT_HH_

#include "mqScintRHit.hh"

#include "G4VHit.hh"
#include "G4THitsCollection.hh"
#include "G4Track.hh"
#include "G4Allocator.hh"
#include "G4ThreeVector.hh"
#include "G4ParticleDefinition.hh"
#include <vector>
//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

class mqScintHit : public G4VHit
{
  public:

    mqScintHit();
    ~mqScintHit();
    mqScintHit(const mqScintHit&);
    const mqScintHit& operator=(const mqScintHit&);
    G4int operator==(const mqScintHit&) const;

    inline void* operator new(size_t);
    inline void  operator delete(void*);

    void Draw();
    void Print();

    void SetTrackID(G4int track){ trackID = track; };
    void SetParentID(G4int pid){ parentID  = pid; };

    void SetCopyNo(G4int nb){ copyNo  = nb;   };
    G4int    GetCopyNo()const{ return copyNo; };

    void SetEDep(G4double ed){ EDep    = ed;    };
    void AddEDep(G4double de){ EDep   += de;    };

    void SetEDepRecoil(G4double er){ EDepRecoil    = er;    };
    void AddEDepRecoil(G4double der){ EDepRecoil   += der;   };

    void SetInitialHitTime(G4double tm){ initialHitTime    = tm;    };
    void SetParticleName(G4String pn){ particleName   = pn;    };

    //void SetScintNb(G4int bn){ scintNb  = bn;    };
    void SetHitPosition     (G4ThreeVector xyz){ hitPosition     = xyz;   };

    G4int    GetTrackID()const{ return trackID; };
    G4int    GetParentID()const{ return parentID; };
    G4double GetEDep()const{ return EDep; };
    G4double GetEDepRecoil()const{ return EDepRecoil; };

    G4double GetInitialHitTime()const{ return initialHitTime; };
    G4String GetParticleName()const{ return particleName; };

    //G4int    GetScintNb()const{ return scintNb; };
    G4ThreeVector GetHitPosition()const{ return hitPosition; };


    static bool compareHits(mqScintHit* const &a, mqScintHit* const &b);
    mqScintRHit* ConvertToROOTHit() const;
  private:

    G4int         trackID;
    G4int         parentID;
    //G4int         scintNb;
    G4double      EDep;
    G4int 	  copyNo;
    G4double      EDepRecoil;
    G4double      initialHitTime;
    G4String      particleName;
    G4ThreeVector hitPosition;

};

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......
typedef std::vector<mqScintHit*> mqScintHitVector;
typedef G4THitsCollection<mqScintHit> mqScintHitsCollection;

extern G4Allocator<mqScintHit> mqScintHitAllocator;

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

inline void* mqScintHit::operator new(size_t)
{
  void *aHit;
  aHit = (void *) mqScintHitAllocator.MallocSingle();
  return aHit;
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

inline void mqScintHit::operator delete(void *aHit)
{
	mqScintHitAllocator.FreeSingle((mqScintHit*) aHit);
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......



#endif /* MQSCINTHIT_HH_ */
