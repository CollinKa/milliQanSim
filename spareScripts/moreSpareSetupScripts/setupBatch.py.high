#!/usr/bin/env python

import subprocess
import os
import shutil
import sys
import linecache

jobNumber = int(sys.argv[1])
proc = str(sys.argv[2]) # Sample, mCP_UFO, JPsi, Y1S, Y2S, Y3S, cosmicmuons, beammuons, Cs137gamma
#mass = float(sys.argv[3])
#charge = float(sys.argv[4])
#filenum = str(sys.argv[5])

init = linecache.getline('/homes/schmitz/milliQanFullSim/rootMacros/rootMac/unfinishedhigh.txt.pass2',jobNumber)
read = init.split()
mass = read[0]
charge = read[1]
filen = read[2]

print(mass)
print(charge)
print(filen)
#massDict = {
#    'mCP_UFO' : [0.01, 0.02, 0.03, 0.05, 0.1, 0.2, 0.3, 0.5, 0.7], #mCP masses
#    'cosmicmuons' : [0.105],
#    'beammuons' : [0.105]
#}

#charges = [0.01, 0.02, 0.05, 0.07, 0.1, 0.14, 0.2, 0.3] #mCP charges

configFile = 'particles'
nCores = 1
prefix='/net/cms27/cms27r0/schmitz/milliqanTrajectories/hadoop/cms/store/user/ryan/milliqan/milliq_mcgen/mcp_txt/v8_v1_save2m_full/'
#projectDir = os.getcwd() + '/'
projectDir = '/homes/schmitz/milliQanFullSim/'
#scratch directory for condor
outputdir = '/net/cms27/cms27r0/schmitz/mcpSignal_fullsim/hadoop/cms/store/user/ryan/beammcp_fullSim_v1/mcp_v8_v1_save2m_full_fullSim_v1/newdata_highmass/'

# Rescale the y or z position for the direction of the particle gun
yRescale = 1.
zRescale = 1.
num_lines = sum(1 for line in open(os.path.join(prefix,filen)))
########################################################################
# Define masses/charges based on chosen process
########################################################################

#masses = massDict[proc]

if proc == 'beammcp':
    nEv = num_lines
    particle = 'monopole'
#    mass = 
    #masses[jobNumber / len(charges)]
#    charge = 0.005
    #charges[jobNumber % len(charges)]
#    sourcename = 'output_1.txt'
#    sourcename = 'mCP_UFO_v7/' + proc + '/' + str(mass) + '/' + str(charge) + '/hit_4_vecs.txt'
    macname_init = projectDir + 'runMac/mcp_novis.mac' 
    macname = projectDir+"runMac/dir_mcp_novis/mcp_novis_{0}.mac".format(jobNumber)
    shutil.copy(macname_init,macname)
    outputname = proc + '.' + str(mass) + 'GeV.' + str(charge) + 'Q.' + str(jobNumber)

if proc == 'beammuons':
    mass = 0.105
    charge = 1.000
    nEv = 5
    particle = 'mu-'
    sourcename = 'muon_hit_4_vecs.txt'
    macname = 'runMac/mcp_novis.mac' 
    outputname = proc + '.' + str(jobNumber)

if proc == 'cosmicmuons':
    mass = 0.105
    charge = 1.000
    nEv = 100
    particle = 'mu-'
    macname = 'runMac/specmuon45_no_vis.mac'
    outputname = proc + '.' + str(jobNumber)

if proc == 'Cs137gamma':
    mass = 0
    charge = 0
    nEv = 1000
    particle = 'gamma'
    macname = 'runMac/Cs137gamma1C.mac'
    outputname = proc + '.' + str(jobNumber)


########################################################################
# Change values in configuration files
########################################################################

print outputname, nEv
#if   charge < 0.0030: nEv = 25000
#elif charge < 0.0050: nEv = 10000
#elif charge < 0.0090: nEv = 1000
#elif charge < 0.0200: nEv = 400
#elif charge < 0.0500: nEv = 100
#elif charge < 0.2000: nEv = 50
#else: nEv = 20

#if   charge < 0.0100: sourcecharge = 0.001
#elif charge < 0.1000: sourcecharge = 0.01
#else: sourcecharge = 0.1

#Define names
#os.mkdir('milliQanBuild')
#os.chdir('milliQanBuild')
#subprocess.call('tar -xvf ../mqDemoSim.tar', shell = True)

#outputdir = '/hadoop/cms/store/user/ryan/' + proc + '/'

os.chdir(projectDir + 'build')

if proc != 'cosmicmuons' and proc != 'Cs137gamma':
    subprocess.call('sed -i "s/^yParticleGunRescale.*/yParticleGunRescale = ' + str(yRescale) + '/g" config/particles.ini', shell = True)
    subprocess.call('sed -i "s/^zParticleGunRescale.*/zParticleGunRescale = ' + str(zRescale) + '/g" config/particles.ini', shell = True)
    subprocess.call('sed -i "s/^ElectricCharge.*/ElectricCharge = ' + str(charge) + '/g" config/particles.ini', shell = True)
    subprocess.call('sed -i "s/^MonopoleMass.*/MonopoleMass = ' + str(mass) + '/g" config/particles.ini', shell = True)
    subprocess.call('sed -i "s/^Particle.*/Particle = ' + particle + '/g" config/particles.ini', shell = True)
    subprocess.call('sed -i "s|FileName.*|FileName = ' + filen + '|g" config/particles.ini', shell = True)
    subprocess.call('sed -i "s|PathName.*|PathName = ' + prefix + '|g" config/particles.ini', shell = True)
#    subprocess.call('sed -i "s|.*new MilliQPrimaryGeneratorAction.*|   runManager->SetUserAction(new MilliQPrimaryGeneratorAction(pt,eventOffset));|g" ' + projectDir + 'MilliQan.cc', shell = True)
#    subprocess.call('sed -i "s|.*new mqPrimaryGeneratorAction.*|   //runManager->SetUserAction(new mqPrimaryGeneratorAction(detector));|g" ' + projectDir + 'MilliQan.cc', shell = True)

if proc == 'beammcp':
    shutil.copy(os.path.join(projectDir,'build/config/particles.ini'),os.path.join(projectDir,"build/config/particle/particles{0}.ini".format(jobNumber)))
    subprocess.call('sed -i "s|ParticleConfig.*|ParticleConfigFile = config/particle/particles'+str(jobNumber)+'.ini ' + '|g" config/onepc.ini', shell = True)
    shutil.copy(os.path.join(projectDir,'build/config/onepc.ini'),os.path.join(projectDir,"build/config/batch/onepc{0}.ini".format(jobNumber)))
    subprocess.call('sed -i "s|.*std::string configFile.*|std::string configFile = \\"config/batch/onepc'+str(jobNumber)+'.ini\\";' + '|g" '+projectDir+'MilliQan.cc', shell = True)

#    mustring = "\\\"mu\\\""
#    monopolestring = "\\\"monopole\\\""
#    subprocess.call('sed -i "s|.*mumonopole.*|                 //if(particleName.contains('+mustring+') //mumonopole |g" ' + projectDir + 'src/mqSteppingAction.cc', shell = True)
#    subprocess.call('sed -i "s|.*monopolemu.*|                 if(particleName.contains('+monopolestring+') //monopolemu |g" ' + projectDir + 'src/mqSteppingAction.cc', shell = True)
#subprocess.call('sed -i "s|.*if(eventInformation->GetPMTHits.*| //if(eventInformation->GetPMTHits()->size()){ |g" ' + projectDir + 'src/mqEventAction.cc', shell = True)
#subprocess.call('sed -i "s|.*if(true).*| if(true){ |g" ' + projectDir + 'src/mqEventAction.cc', shell = True)
    
if proc == 'beammuons':
    subprocess.call('sed -i "s|.*if(eventInformation->GetPMTHits.*| //if(eventInformation->GetPMTHits()->size()){ |g" ' + projectDir + 'src/mqEventAction.cc', shell = True)
    subprocess.call('sed -i "s|.*if(true).*| if(true){ |g" ' + projectDir + 'src/mqEventAction.cc', shell = True)
    subprocess.call('sed -i "s|.*mumonopole.*|                 if(particleName.contains(\\"mu\\") //mumonopole |g" ' + projectDir + 'src/mqSteppingAction.cc', shell = True)
    subprocess.call('sed -i "s|.*monopolemu.*|                 //if(particleName.contains(\\"monopole\\") //monopolemu |g" ' + projectDir + 'src/mqSteppingAction.cc', shell = True)

if proc == 'cosmicmuons':
    subprocess.call('sed -i "s|.*new MilliQPrimaryGeneratorAction.*|   //runManager->SetUserAction(new MilliQPrimaryGeneratorAction(pt,eventOffset));|g" ' + projectDir + 'MilliQan.cc', shell = True)
    subprocess.call('sed -i "s|.*new mqPrimaryGeneratorAction.*|   runManager->SetUserAction(new mqPrimaryGeneratorAction(detector));|g" ' + projectDir + 'MilliQan.cc', shell = True)
    subprocess.call('sed -i "s|.*if(eventInformation->GetPMTHits.*| if(eventInformation->GetPMTHits()->size()){ |g" ' + projectDir + 'src/mqEventAction.cc', shell = True)
    subprocess.call('sed -i "s|.*if(true).*| //if(true){ |g" ' + projectDir + 'src/mqEventAction.cc', shell = True)
    subprocess.call('sed -i "s|.*mumonopole.*|                 if(particleName.contains(\\"mu\\") //mumonopole |g" ' + projectDir + 'src/mqSteppingAction.cc', shell = True)
    subprocess.call('sed -i "s|.*monopolemu.*|                 //if(particleName.contains(\\"monopole\\") //monopolemu |g" ' + projectDir + 'src/mqSteppingAction.cc', shell = True)

if proc == 'Cs137gamma':
    subprocess.call('sed -i "s|.*new MilliQPrimaryGeneratorAction.*|   //runManager->SetUserAction(new MilliQPrimaryGeneratorAction(pt,eventOffset));|g" ' + projectDir + 'MilliQan.cc', shell = True)
    subprocess.call('sed -i "s|.*new mqPrimaryGeneratorAction.*|   runManager->SetUserAction(new mqPrimaryGeneratorAction(detector));|g" ' + projectDir + 'MilliQan.cc', shell = True)
    subprocess.call('sed -i "s|.*if(eventInformation->GetPMTHits.*| if(eventInformation->GetPMTHits()->size()){ |g" ' + projectDir + 'src/mqEventAction.cc', shell = True)
    subprocess.call('sed -i "s|.*if(true).*| //if(true){ |g" ' + projectDir + 'src/mqEventAction.cc', shell = True)
    subprocess.call('sed -i "s|.*mumonopole.*|                 if(particleName.contains(\\"gamma\\") //mumonopole |g" ' + projectDir + 'src/mqSteppingAction.cc', shell = True)
    subprocess.call('sed -i "s|.*monopolemu.*|                 //if(particleName.contains(\\"monopole\\") //monopolemu |g" ' + projectDir + 'src/mqSteppingAction.cc', shell = True)
    
subprocess.call('sed -i "s/.*beamOn.*/\/run\/beamOn ' + str(nEv) + '/g" ' +  macname, shell = True)
subprocess.call('sed -i "s|.*fname.*|/run/fname ' + outputdir + outputname+'/|g" ' +  macname, shell = True)

if not os.path.exists(outputdir+outputname):
    os.mkdir(outputdir+outputname)


#subprocess.call('bsub ./MilliQan ../' + macname, shell = True)

########################################################################
#Run Program
########################################################################
#useful if just running locally to rebuild automatically
#subprocess.call('cmake ..', shell = True)
subprocess.call('make -j4', shell = True)




#subprocess.call('tar -cvf mqDemoSim.tar build/ runMac/ OpticalData/ datacosmicmuons/ databeammuons/ muon_hit_4_vecs.txt')
#shutil.move('mqDemoSim.tar','condor')
#subprocess.call('./MilliQan ' + projectDir + macname, shell = True)

#shutil.move(projectDir + 'data' + proc + '/tempdir' + str(jobNumber) + '/MilliQan.root', outputdir + outputname + '.root')
#subprocess.call('gfal-copy -pft 4200 --verbose file://' + projectDir + 'data' + proc + '/tempdir' + str(jobNumber) + '/MilliQan.root gsiftp://gftp.t2.ucsd.edu' + outputdir + outputname + '.root', shell = True)
#gfal-copy -pft 4200 --verbose file://${PROJECTDIR}/data$2/tempdir$1/MilliQan.root gsiftp://gftp.t2.ucsd.edu${OUTPUTDIR}$2"."$1".root"

#os.chdir('../../')
#subprocess.call('rm -r milliQanBuild', shell = True)
#subprocess.call('rm mqDemoSim.tar', shell = True)
