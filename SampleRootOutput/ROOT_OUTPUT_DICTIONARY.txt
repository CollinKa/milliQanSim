Here is an overview of the parameters contained in the ROOT outputs from the sim.
The sample file here concerns mCPs, but for runs with muons the Gamma/Electron/Muon datastructures will populate with relevant data

TRACK LEVEL INFORMATION:
trackID: unique identifier (per-event) for a single track. Primaries are always 1, I believe, with parentID 0.

initial/finalProcessName: Generating process name (as a TString) for the particle

initial/finalVolumeName: Volume name at creation/destruction

====================================================================

initial/finalCopyNo: Unique identifier for each scintillator/airgap/wrapping object in the simulation. The world volume always has copyNo of 0, while each of the bars, the slabs, and the panels all have a unique copy number. The bars are numbered 0-17, the slabs 18-21, and the panels 22-30.

The bars have the following numbering convention: ////////////////// OUTDATED, TRUE ONLY FOR DEMONSTRATOR  ////////////////////////////
The first layer is indexed 0-5, the second 6-11, the third 12-17.
Within a layer, the bars are indexed like so (from the perspective of an incident particle, with the view in this case pointing in the +z direction down the axis of the detector):
 _______
|   |   |
| 2 | 5 |
|___|___|
|   |   |
| 1 | 4 |
|___|___|
|   |   |
| 0 | 3 |
|___|___|

Add 6 for subsequent layers.
The slabs are indexed 18-21, with 18 in front of the first layer and 21 behind the last.
The panels are indexed 22-30, with the left panel in the first layer (from the perspective above) numbered 22, the top panel numbered 23, and the right panel numbered 24. Add 3 for subsequent layers.

Note that the default copy number is 0. If you see something weird going on with copy number 0 having too many entries, it's possible that you're looking at a volume that's not parameterized or is not a bar/slab/panel, like the Pb slab or the Al support structure.

=====================================================================

The initial and final times: Time at creation and destruction of the particle track

Initial/Final Energy: Kinetic energy of particle at creation and destruction

Energy Deposit: Not being used now. Note that deposited energy in Geant has a very specific meaning that is not just "energy lost". To avoid EM divergence at low energies, would-be low-energy particles that would propagate for shorter than the default step length in the current material (0.7 mm by default) are just integrated over and the total energy is subtracted from the energy of the parent track. Deposited energy is used to accumulate these implicit energy deposits; to get total energy lost, add the deposited energy to the energy of any explicitly generated particles created by the parent.

ParentID: Track ID of the particle's generating track (0 for the case of primaries)

InitialPositionX/Y/Z: Spatial coordinates of the initial vertex for the particle

TotalTrackLength: Total length, from creation to destruction, of a particle track

totalEnergy: Total energy at the end of the particle's track (including KE and mass)

nbOfElastics/nbOfInteractions: Not being used now, but can track the total number of distinct interactions of a certain type underwent by a particle

==============================================================================================
HIT LEVEL INFORMATION:

There are two types of "Hit" classes: PMTHit and ScintHit.

PMTHit populates when photons pass the quantum efficiency of a PMT (i.e. are detected by a PMT). This happens when a photon enters into the photocathode volume; its track is killed and then a detection check, given by the defined quantum efficiency, is made. Regardless of whether or not the detection passes, the track is always killed. Note that these checks are only made for photons; PMTHit is a photon detection hit class.

ScintHit populates when a user-specified particle (muon or mCP is the typical choice, depending on the type of primary being generated) enters and exits a scintillator volume. The class is populated with temp values when the particle enters a bar/panel/slab, and registers a hit when that same particle successfully makes it out of the scintillator. There is no detection efficiency involved; this is a kind of MCTruth parameter we use to track particle passage through the detector more explicitly

PMT HIT INFORMATION:

pmtNumber: Exactly the same as copyNumber described above, but assigned to corresponding PMTs.
initialHitTime: Time of the hit in the PMT
trackID: Identifier for the track which generated the hit
parentID: Identifier for the parent of the track which generated the hit

SCINT HIT INFORMATION:

trackID: Track of particle which passed through the scint
parentID: Track ID for the parent of the track which generated the hit
EDep_MeV: Total energy loss (initial-final) of the particle from entry to exit
trackLength: Length of scintillator the track passed through from entry to exit
copyNo: Same as above
hitTime: Initial time when the particle entered the scintillator
exitTime: Time when the particle exited the scintillator

=============================================================================================
EVENT LEVEL INFORMATION:

This information is populated once per event. So, if you run 1000 events, you'll get 1000 entries in all these parameters.

EventID: Event number (0,1,2,...,999)

NbGamma/Muon/Photon/Electron/etcTracks: For particles that are explicitly tracked, counts the number of those tracks for each event. Will be empty for both untracked particles (e.g. if you turn photons off) and for particles which never show up (e.g. if you do a muon run, the mCP counts will be zero)

NbPMT/ScintHits: Total number of times a hit was registered anywhere for a given event. For PMTs, the number of photons detected by all PMTs for an event. For Scint, the number of times the primary particle passed all the way through a bar/panel/slab

NbOfCerenkov/ScintillationPhotons: Number of photons generated by Cerenkov/Scintillation processes

absorptionCount and boundaryAbsorptionCount: Former populates when photons are absorbed (Process=="OpAbsorption"), latter populates when it does so at a material boundary (Process=="OpBoundary" && boundaryStatus == Absorbed)

pmtsAboveTrigger: Empty now, can be used if one wants to define a trigger threshold and process the triggers at runtime

Edep_MeV: a sum of all energy deposits (i.e. implicit energy loss, NOT explicit loss) by a given particle type (or all particles as it is now) over the course of the sim. Currently not being used usefully; just populating all energy deposits for all particle types right now

barHit/slabHit/panelHit: Number of times a primary of interest (the same one which populates ScintHit) enters a bar, slab, or panel, respectively

muonTrig: Not used now, but could be used as a trigger on e.g. geometric passage rather than some sort of PE cut if you want to design a trigger at runtime

eventWeight: Event Weight of the generator process (used when inputting fourvectors)
ProcessID: Type of generator process (used when inputting fourvectors)
